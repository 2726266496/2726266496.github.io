<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>自适应网页设计要点</title>
      <link href="/2019/03/04/%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
      <content type="html"><![CDATA[<p>移动设备已经超过桌面设备，成为访问互联网的最常见终端。于是，网页设计师不得不面对一个难题：如何才能在不同大小的设备上呈现同样的网页？  </p><img src="/2019/03/04/自适应网页设计/bg2012050101.jpg" title="[移动设备]">  <a id="more"></a><p>手机的屏幕比较小，PC的屏幕宽度，一般都在1000像素以上（目前主流宽度是1920×1080），有的还达到了更高像素。同样的内容，要在大小迥异的屏幕上，都呈现出满意的效果，并不是一件容易的事。 </p><p>很多网站的解决方法，是为不同的设备提供不同的网页，比如专门提供一个mobile版本，或者iPhone / iPad版本。这样做固然保证了效果，但是比较麻烦，同时要维护好几个版本，而且如果一个网站有多个portal（入口），会大大增加架构设计的复杂度。 </p><p> 于是，很早就有人设想，能不能”一次设计，普遍适用”，让同一张网页自动适应不同大小的屏幕，根据屏幕宽度，自动调整布局（layout）？ </p><img src="/2019/03/04/自适应网页设计/bg2012050107.jpg" title="[移动设备]">  <h2 id="“自适应网页设计”的概念"><a href="#“自适应网页设计”的概念" class="headerlink" title="“自适应网页设计”的概念"></a>“自适应网页设计”的概念</h2><p>2010年，Ethan Marcotte提出了<a href="http://www.alistapart.com/articles/responsive-web-design/" target="_blank" rel="noopener">“自适应网页设计”</a>（Responsive Web Design）这个名词，指可以自动识别屏幕宽度、并做出相应调整的网页设计。</p><p>他制作了一个<a href="http://www.alistapart.com/d/responsive-web-design/ex/ex-site-flexible.html" target="_blank" rel="noopener">范例</a>，里面是《福尔摩斯历险记》六个主人公的头像。如果屏幕宽度大于1300像素，则6张图片并排在一行。<br><img src="/2019/03/04/自适应网页设计/bg2012050103.jpg" title="[大于1300像素]">  </p><p>如果屏幕宽度在600像素到1300像素之间，则6张图片分成两行。</p><img src="/2019/03/04/自适应网页设计/bg2012050104.jpg" title="[大于600小于1300像素]">  <p>如果屏幕宽度在400像素到600像素之间，则导航栏移到网页头部。</p><img src="/2019/03/04/自适应网页设计/bg2012050105.jpg" title="[400像素到600像素]">  <p>如果屏幕宽度在400像素以下，则6张图片分成三行。</p><img src="/images/placeholder.png" title="[400像素以下]" data-src="/2019/03/04/自适应网页设计/bg2012050106.jpg" class="lazyload">  <p><a href="http://mediaqueri.es/" target="_blank" rel="noopener">mediaqueri.es</a>上面有更多这样的例子。</p><p>这里还有一个<a href="http://www.benjaminkeen.com/misc/bricss/" target="_blank" rel="noopener">测试小工具</a>，可以在一张网页上，同时显示不同分辨率屏幕的测试效果，我推荐安装。</p><h2 id="允许网页宽度自动调整"><a href="#允许网页宽度自动调整" class="headerlink" title="允许网页宽度自动调整"></a>允许网页宽度自动调整</h2><p>“自适应网页设计”到底是怎么做到的？其实并不难。</p><p>首先，在网页代码的头部，加入一行<a href="https://developer.mozilla.org/en/mobile/viewport_meta_tag" target="_blank" rel="noopener">viewport元标签</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/library/ios/#DOCUMENTATION/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html" target="_blank" rel="noopener">viewport</a>是网页默认的宽度和高度，上面这行代码的意思是，网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。</p><p>所有主流浏览器都支持这个设置，包括IE9。对于那些老式浏览器（主要是IE6、7、8），需要使用<a href="http://code.google.com/p/css3-mediaqueries-js/" target="_blank" rel="noopener">css3-mediaqueries.js</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　<span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">　　　　&lt;script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">　　&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="不使用绝对宽度"><a href="#不使用绝对宽度" class="headerlink" title="不使用绝对宽度"></a>不使用绝对宽度</h2><p>由于网页会根据屏幕宽度调整布局，所以不能使用绝对宽度的布局，也不能使用具有绝对宽度的元素。这一条非常重要。</p><p>具体说，CSS代码不能指定像素宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="selector-tag">width</span><span class="selector-pseudo">:xxx</span> <span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>只能指定百分比宽度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">xx</span>%;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:auto</span>;</span><br></pre></td></tr></table></figure><h2 id="相对大小的字体"><a href="#相对大小的字体" class="headerlink" title="相对大小的字体"></a>相对大小的字体</h2><p>字体也不能使用绝对大小（px），而只能使用相对大小（rem、em）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">　　　　<span class="attribute">font</span>: normal <span class="number">100%</span> Helvetica, Arial, sans-serif;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>上面的代码指定，字体大小是页面默认大小的100%，即16像素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　<span class="selector-tag">h1</span> &#123;</span><br><span class="line">　　　　<span class="attribute">font-size</span>: <span class="number">1.5em</span>; </span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>然后，h1的大小是默认大小的1.5倍，即24像素（24/16=1.5）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">small</span> &#123;</span><br><span class="line">　　　　<span class="attribute">font-size</span>: <span class="number">0.875em</span>;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>small元素的大小是默认大小的0.875倍，即14像素（14/16=0.875）。</p><h2 id="五、流动布局（fluid-grid）"><a href="#五、流动布局（fluid-grid）" class="headerlink" title="五、流动布局（fluid grid）"></a>五、流动布局（fluid grid）</h2><p><a href="http://www.alistapart.com/articles/fluidgrids/" target="_blank" rel="noopener">“流动布局”</a>的含义是，各个区块的位置都是浮动的，不是固定不变的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.main</span> &#123;</span><br><span class="line">　　　　<span class="attribute">float</span>: right;</span><br><span class="line">　　　　<span class="attribute">width</span>: <span class="number">70%</span>; </span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="selector-class">.leftBar</span> &#123;</span><br><span class="line">　　　　<span class="attribute">float</span>: left;</span><br><span class="line">　　　　<span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>float的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。</p><p>另外，绝对定位（position: absolute）的使用，也要非常小心。</p><h2 id="六、选择加载CSS"><a href="#六、选择加载CSS" class="headerlink" title="六、选择加载CSS"></a>六、选择加载CSS</h2><p>“自适应网页设计”的核心，就是CSS3引入的<a href="http://www.w3.org/TR/CSS21/media.html" target="_blank" rel="noopener">Media Query</a>模块。</p><p>它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">　　　　<span class="attr">media</span>=<span class="string">"screen and (max-device-width: 400px)"</span></span></span><br><span class="line"><span class="tag">　　　　<span class="attr">href</span>=<span class="string">"tinyScreen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span></span></span><br><span class="line"><span class="tag">　　　　<span class="attr">media</span>=<span class="string">"screen and (min-width: 400px) and   (max-device-width: 600px)"</span></span></span><br><span class="line"><span class="tag">　　　　<span class="attr">href</span>=<span class="string">"smallScreen.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。</p><p>除了用html标签加载CSS文件，还可以在现有CSS文件中加载。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> url(<span class="string">"tinyScreen.css"</span>) screen and (max-device-width: <span class="number">400px</span>);</span><br></pre></td></tr></table></figure><h2 id="CSS的-media规则"><a href="#CSS的-media规则" class="headerlink" title="CSS的@media规则"></a>CSS的@media规则</h2><p>同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">　@<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) &#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="selector-class">.column</span> &#123;</span><br><span class="line">　　　　　　<span class="attribute">float</span>: none;</span><br><span class="line">　　　　　　<span class="attribute">width</span>:auto;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">　　　　　　<span class="attribute">display</span>:none;</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>上面的代码意思是，如果屏幕宽度小于400像素，则column块取消浮动（float:none）、宽度自动调节（width:auto），sidebar块不显示（display:none）。</p><h2 id="图片的自适应（fluid-image）"><a href="#图片的自适应（fluid-image）" class="headerlink" title="图片的自适应（fluid image）"></a>图片的自适应（fluid image）</h2><p>除了布局和文本，”自适应网页设计”还必须实现图片的<a href="http://unstoppablerobotninja.com/entry/fluid-images" target="_blank" rel="noopener">自动缩放</a>。</p><p>这只要一行CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">max-width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure><p>这行代码对于大多数嵌入网页的视频也有效，所以可以写成：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">object</span> &#123; <span class="attribute">max-width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>古董级版本的IE不支持max-width，所以只好写成：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="selector-tag">img</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>此外，windows平台缩放图片时，可能出现图像失真现象。这时，可以尝试使用IE的<a href="http://css-tricks.com/ie-fix-bicubic-scaling-for-images/" target="_blank" rel="noopener">专有命令</a>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-tag">img</span> &#123; <span class="attribute">-ms-interpolation-mode</span>: bicubic; &#125;</span><br></pre></td></tr></table></figure><p>或者，Ethan Marcotte的<a href="http://unstoppablerobotninja.com/demos/resize/imgSizer.js" target="_blank" rel="noopener">imgSizer.js</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　addLoadEvent(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>).getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"></span><br><span class="line">　　　　imgSizer.collate(imgs);</span><br><span class="line"></span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure><p>不过，有条件的话，最好还是根据不同大小的屏幕，加载不同分辨率的图片。有<a href="http://blog.cloudfour.com/responsive-imgs-part-2/" target="_blank" rel="noopener">很多方法</a>可以做到这一条，服务器端和客户端都可以实现。</p><p>转自：<a href="http://www.ruanyifeng.com" target="_blank" rel="noopener">阮一峰博客</a></p><p>虽然这篇文章发布已经有七年，但对于响应式网站设计还是有很重要的指导意义，所以转载收藏。</p>]]></content>
      
      
        <tags>
            
            <tag> 网页设计 </tag>
            
            <tag> 自适应 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>汇编语言入门教程</title>
      <link href="/2018/11/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>学习编程其实就是学高级语言，即那些为人类设计的计算机语言。 </p><p>但是，计算机不理解高级语言，必须通过编译器转成二进制代码，才能运行。学会高级语言，并不等于理解计算机实际的运行步骤。 </p><img src="/2018/11/17/汇编语言入门教程/bg2018012204.png" title="[]"> <a id="more"></a><p>计算机真正能够理解的是低级语言，它专门用来控制硬件。汇编语言就是低级语言，直接描述/控制 CPU 的运行。如果你想了解 CPU 到底干了些什么，以及代码的运行步骤，就一定要学习汇编语言。 </p><p>汇编语言不容易学习，就连简明扼要的介绍都很难找到。下面我尝试写一篇最好懂的汇编语言教程，解释 CPU 如何执行代码。 </p><img src="/2018/11/17/汇编语言入门教程/bg2018012202.jpg" title="[]">  <h1 id="汇编语言是什么？"><a href="#汇编语言是什么？" class="headerlink" title="汇编语言是什么？"></a>汇编语言是什么？</h1><p>我们知道，CPU 只负责计算，本身不具备智能。你输入一条指令（instruction），它就运行一次，然后停下来，等待下一条指令。 </p><p>这些指令都是二进制的，称为操作码（opcode），比如加法指令就是00000011。编译器的作用，就是将高级语言写好的程序，翻译成一条条操作码。 </p><p>对于人类来说，二进制程序是不可读的，根本看不出来机器干了什么。为了解决可读性的问题，以及偶尔的编辑需求，就诞生了汇编语言。<br><img src="/2018/11/17/汇编语言入门教程/bg2018012203.jpg" title="[]"> </p><p>汇编语言是二进制指令的文本形式，与指令是一一对应的关系。比如，加法指令00000011写成汇编语言就是 ADD。只要还原成二进制，汇编语言就可以被 CPU 直接执行，所以它是最底层的低级语言。 </p><h1 id="来历"><a href="#来历" class="headerlink" title="来历"></a>来历</h1><p>最早的时候，编写程序就是手写二进制指令，然后通过各种开关输入计算机，比如要做加法了，就按一下加法开关。后来，发明了纸带打孔机，通过在纸带上打孔，将二进制指令自动输入计算机。 </p><p>为了解决二进制指令的可读性问题，工程师将那些指令写成了八进制。二进制转八进制是轻而易举的，但是八进制的可读性也不行。很自然地，最后还是用文字表达，加法指令写成 ADD。内存地址也不再直接引用，而是用标签表示。 </p><p>这样的话，就多出一个步骤，要把这些文字指令翻译成二进制，这个步骤就称为 assembling，完成这个步骤的程序就叫做 assembler。它处理的文本，自然就叫做 aseembly code。标准化以后，称为 assembly language，缩写为 asm，中文译为汇编语言。 </p><img src="/2018/11/17/汇编语言入门教程/bg2018012205.jpg" title="[]"> <p>每一种 CPU 的机器指令都是不一样的，因此对应的汇编语言也不一样。本文介绍的是目前最常见的 x86 汇编语言，即 Intel 公司的 CPU 使用的那一种。 </p><h1 id="三、寄存器"><a href="#三、寄存器" class="headerlink" title="三、寄存器"></a>三、寄存器</h1><p>学习汇编语言，首先必须了解两个知识点：寄存器和内存模型。 </p><p>先来看寄存器。CPU 本身只负责运算，不负责储存数据。数据一般都储存在内存之中，CPU 要用的时候就去内存读写数据。但是，CPU 的运算速度远高于内存的读写速度，为了避免被拖慢，CPU 都自带一级缓存和二级缓存。基本上，CPU 缓存可以看作是读写速度较快的内存。 </p><p>但是，CPU 缓存还是不够快，另外数据在缓存里面的地址是不固定的，CPU 每次读写都要寻址也会拖慢速度。因此，除了缓存之外，CPU 还自带了寄存器（register），用来储存最常用的数据。也就是说，那些最频繁读写的数据（比如循环变量），都会放在寄存器里面，CPU 优先读写寄存器，再由寄存器跟内存交换数据。 </p><img src="/2018/11/17/汇编语言入门教程/bg2018012206.png" title="[]"> <p>寄存器不依靠地址区分数据，而依靠名称。每一个寄存器都有自己的名称，我们告诉 CPU 去具体的哪一个寄存器拿数据，这样的速度是最快的。有人比喻寄存器是 CPU 的零级缓存。 </p><h1 id="四、寄存器的种类"><a href="#四、寄存器的种类" class="headerlink" title="四、寄存器的种类"></a>四、寄存器的种类</h1><p>早期的 x86 CPU 只有8个寄存器，而且每个都有不同的用途。现在的寄存器已经有100多个了，都变成通用寄存器，不特别指定用途了，但是早期寄存器的名字都被保存了下来。  </p><ul><li>EAX</li><li>EBX</li><li>ECX</li><li>EDX</li><li>EDI</li><li>ESI</li><li>EBP</li><li>ESP</li></ul><p>上面这8个寄存器之中，前面七个都是通用的。ESP 寄存器有特定用途，保存当前 Stack 的地址。</p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012207.png" class="lazyload"> <p>我们常常看到 32位 CPU、64位 CPU 这样的名称，其实指的就是寄存器的大小。32 位 CPU 的寄存器大小就是4个字节。 </p><h1 id="五、内存模型：Heap"><a href="#五、内存模型：Heap" class="headerlink" title="五、内存模型：Heap"></a>五、内存模型：Heap</h1><p>寄存器只能存放很少量的数据，大多数时候，CPU 要指挥寄存器，直接跟内存交换数据。所以，除了寄存器，还必须了解内存怎么储存数据。 </p><p>程序运行的时候，操作系统会给它分配一段内存，用来储存程序和运行产生的数据。这段内存有起始地址和结束地址，比如从0x1000到0x8000，起始地址是较小的那个地址，结束地址是较大的那个地址。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012208.png" class="lazyload"> <p>程序运行过程中，对于动态的内存占用请求（比如新建对象，或者使用malloc命令），系统就会从预先分配好的那段内存之中，划出一部分给用户，具体规则是从起始地址开始划分（实际上，起始地址会有一段静态数据，这里忽略）。举例来说，用户要求得到10个字节内存，那么从起始地址0x1000开始给他分配，一直分配到地址0x100A，如果再要求得到22个字节，那么就分配到0x1020。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012209.png" class="lazyload"> <p>这种因为用户主动请求而划分出来的内存区域，叫做 Heap（堆）。它由起始地址开始，从低位（地址）向高位（地址）增长。Heap 的一个重要特点就是不会自动消失，必须手动释放，或者由垃圾回收机制来回收。 </p><h1 id="六、内存模型：Stack"><a href="#六、内存模型：Stack" class="headerlink" title="六、内存模型：Stack"></a>六、内存模型：Stack</h1><p>除了 Heap 以外，其他的内存占用叫做 Stack（栈）。简单说，Stack 是由于函数运行而临时占用的内存区域。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012210.png" class="lazyload"><p>请看下面的例子: </p><pre><code class="C"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{   <span class="keyword">int</span> a = <span class="number">2</span>;   <span class="keyword">int</span> b = <span class="number">3</span>;}</code></pre><p>上面代码中，系统开始执行main函数时，会为它在内存里面建立一个帧（frame），所有main的内部变量（比如a和b）都保存在这个帧里面。main函数执行结束后，该帧就会被回收，释放所有的内部变量，不再占用空间。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012211.png" class="lazyload"> <p>如果函数内部调用了其他函数，会发生什么情况？ </p><pre><code class="C"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{   <span class="keyword">int</span> a = <span class="number">2</span>;   <span class="keyword">int</span> b = <span class="number">3</span>;   <span class="keyword">return</span> add_a_and_b(a, b);}</code></pre><p>上面代码中，main函数内部调用了add_a_and_b函数。执行到这一行的时候，系统也会为add_a_and_b新建一个帧，用来储存它的内部变量。也就是说，此时同时存在两个帧：main和add_a_and_b。一般来说，调用栈有多少层，就有多少帧。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012212.png" class="lazyload"> <p>等到add_a_and_b运行结束，它的帧就会被回收，系统会回到函数main刚才中断执行的地方，继续往下执行。通过这种机制，就实现了函数的层层调用，并且每一层都能使用自己的本地变量。 </p><p>所有的帧都存放在 Stack，由于帧是一层层叠加的，所以 Stack 叫做栈。生成新的帧，叫做”入栈”，英文是 push；栈的回收叫做”出栈”，英文是 pop。Stack 的特点就是，最晚入栈的帧最早出栈（因为最内层的函数调用，最先结束运行），这就叫做”后进先出”的数据结构。每一次函数执行结束，就自动释放一个帧，所有函数执行结束，整个 Stack 就都释放了。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012213.jpg" class="lazyload"> <img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012214.jpg" class="lazyload">  <p>Stack 是由内存区域的结束地址开始，从高位（地址）向低位（地址）分配。比如，内存区域的结束地址是0x8000，第一帧假定是16字节，那么下一次分配的地址就会从0x7FF0开始；第二帧假定需要64字节，那么地址就会移动到0x7FB0。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012215.png" class="lazyload">  <h1 id="七、CPU-指令"><a href="#七、CPU-指令" class="headerlink" title="七、CPU 指令"></a>七、CPU 指令</h1><h2 id="7-1-一个实例"><a href="#7-1-一个实例" class="headerlink" title="7.1 一个实例"></a>7.1 一个实例</h2><p>了解寄存器和内存模型以后，就可以来看汇编语言到底是什么了。下面是一个简单的程序example.c。 </p><pre><code class="C"><span class="function"><span class="keyword">int</span> <span class="title">add_a_and_b</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{   <span class="keyword">return</span> a + b;}<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{   <span class="keyword">return</span> add_a_and_b(<span class="number">2</span>, <span class="number">3</span>);}</code></pre><p>gcc 将这个程序转成汇编语言。 </p><pre><code class="Bash">$ gcc -S example.c </code></pre><p>上面的命令执行以后，会生成一个文本文件example.s，里面就是汇编语言，包含了几十行指令。这么说吧，一个高级语言的简单操作，底层可能由几个，甚至几十个 CPU 指令构成。CPU 依次执行这些指令，完成这一步操作。 </p><p>example.s经过简化以后，大概是下面的样子。 </p><pre><code class="MASM">_add_a_and_b:   push   %ebx   mov    %eax, [%esp+8]    mov    %ebx, [%esp+12]   add    %eax, %ebx    pop    %ebx    ret  _main:   push   3   push   2   call   _add_a_and_b    add    %esp, 8   ret</code></pre><p>可以看到，原程序的两个函数add_a_and_b和main，对应两个标签_add_a_and_b和_main。每个标签里面是该函数所转成的 CPU 运行流程。 </p><p>每一行就是 CPU 执行的一次操作。它又分成两部分，就以其中一行为例。 </p><p><code>push   %ebx</code> </p><p>这一行里面，push是 CPU 指令，%ebx是该指令要用到的运算子。一个 CPU 指令可以有零个到多个运算子。 </p><p>下面我就一行一行讲解这个汇编程序，建议读者最好把这个程序，在另一个窗口拷贝一份，省得阅读的时候再把页面滚动上来。 </p><h2 id="7-2-push-指令"><a href="#7-2-push-指令" class="headerlink" title="7.2 push 指令"></a>7.2 push 指令</h2><p>根据约定，程序从_main标签开始执行，这时会在 Stack 上为main建立一个帧，并将 Stack 所指向的地址，写入 ESP 寄存器。后面如果有数据要写入main这个帧，就会写在 ESP 寄存器所保存的地址。 </p><p>然后，开始执行第一行代码。</p><p> <code>push   3</code> </p><p>push指令用于将运算子放入 Stack，这里就是将3写入main这个帧。 </p><p>虽然看上去很简单，push指令其实有一个前置操作。它会先取出 ESP 寄存器里面的地址，将其减去4个字节，然后将新地址写入 ESP 寄存器。使用减法是因为 Stack 从高位向低位发展，4个字节则是因为3的类型是int，占用4个字节。得到新地址以后， 3 就会写入这个地址开始的四个字节。 </p><p><code>push   2</code> </p><p>第二行也是一样，push指令将2写入main这个帧，位置紧贴着前面写入的3。这时，ESP 寄存器会再减去 4个字节（累计减去8）。 </p><img src="/images/placeholder.png" title="[]" data-src="/2018/11/17/汇编语言入门教程/bg2018012216.png" class="lazyload"> <h2 id="7-3-call-指令"><a href="#7-3-call-指令" class="headerlink" title="7.3 call 指令"></a>7.3 call 指令</h2><p>第三行的call指令用来调用函数。 </p><p><code>call   _add_a_and_b</code> </p><p>上面的代码表示调用add_a_and_b函数。这时，程序就会去找_add_a_and_b标签，并为该函数建立一个新的帧。 </p><p>下面就开始执行_add_a_and_b的代码。 </p><p><code>push   %ebx</code> </p><p>这一行表示将 EBX 寄存器里面的值，写入_add_a_and_b这个帧。这是因为后面要用到这个寄存器，就先把里面的值取出来，用完后再写回去。 </p><p>这时，push指令会再将 ESP 寄存器里面的地址减去4个字节（累计减去12）。 </p><h2 id="7-4-mov-指令"><a href="#7-4-mov-指令" class="headerlink" title="7.4 mov 指令"></a>7.4 mov 指令</h2><p>mov指令用于将一个值写入某个寄存器。 </p><p><code>mov    %eax, [%esp+8]</code> </p><p>这一行代码表示，先将 ESP 寄存器里面的地址加上8个字节，得到一个新的地址，然后按照这个地址在 Stack 取出数据。根据前面的步骤，可以推算出这里取出的是2，再将2写入 EAX 寄存器。 </p><p>下一行代码也是干同样的事情。 </p><p><code>mov    %ebx, [%esp+12]</code> </p><p>上面的代码将 ESP 寄存器的值加12个字节，再按照这个地址在 Stack 取出数据，这次取出的是3，将其写入 EBX 寄存器。 </p><h2 id="7-5-add-指令"><a href="#7-5-add-指令" class="headerlink" title="7.5 add 指令"></a>7.5 add 指令</h2><p>add指令用于将两个运算子相加，并将结果写入第一个运算子。 </p><p><code>add    %eax, %ebx</code> </p><p>上面的代码将 EAX 寄存器的值（即2）加上 EBX 寄存器的值（即3），得到结果5，再将这个结果写入第一个运算子 EAX 寄存器。 </p><h2 id="7-6-pop-指令"><a href="#7-6-pop-指令" class="headerlink" title="7.6 pop 指令"></a>7.6 pop 指令</h2><p>pop指令用于取出 Stack 最近一个写入的值（即最低位地址的值），并将这个值写入运算子指定的位置。 </p><p><code>pop    %ebx</code> </p><p>上面的代码表示，取出 Stack 最近写入的值（即 EBX 寄存器的原始值），再将这个值写回 EBX 寄存器（因为加法已经做完了，EBX 寄存器用不到了）。 </p><p>注意，pop指令还会将 ESP 寄存器里面的地址加4，即回收4个字节。 </p><h2 id="7-7-ret-指令"><a href="#7-7-ret-指令" class="headerlink" title="7.7 ret 指令"></a>7.7 ret 指令</h2><p>ret指令用于终止当前函数的执行，将运行权交还给上层函数。也就是，当前函数的帧将被回收。 </p><p><code>ret</code> </p><p>可以看到，该指令没有运算子。 </p><p>随着add_a_and_b函数终止执行，系统就回到刚才main函数中断的地方，继续往下执行。 </p><p><code>add    %esp, 8</code> </p><p>上面的代码表示，将 ESP 寄存器里面的地址，手动加上8个字节，再写回 ESP 寄存器。这是因为 ESP 寄存器的是 Stack 的写入开始地址，前面的pop操作已经回收了4个字节，这里再回收8个字节，等于全部回收。 </p><p><code>ret</code> </p><p>最后，main函数运行结束，ret指令退出程序执行。 </p><h1 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h1><p><a href="http://kakaroto.homelinux.net/2017/11/introduction-to-reverse-engineering-and-assembly/" target="_blank" rel="noopener">Introduction to reverse engineering and Assembly</a>,by Youness Alaoui<br><a href="http://www.cs.virginia.edu/~evans/cs216/guides/x86.html" target="_blank" rel="noopener">x86 Assembly Guide</a>,by University of Virginia Computer Science </p>]]></content>
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
            <tag> 汇编入门 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更改TeamViewerID方法总结</title>
      <link href="/2018/08/21/%E6%9B%B4%E6%94%B9TeamViewerID%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>TeamViewer是一款使用体验极佳的远程协助，远程会议工具，对个人用户免费，商业许可比较昂贵，即使个人用户在使用多次后或连接时间过久后，都可能会出现连接限制，断线等问题，针对此问题，总结更改其ID的方法，以突破限制,商业用户请支持正版。<br><a id="more"></a><br>TeamViewer ID基于计算机的多个独特参数生成：  </p><ol><li>网卡的MAC地址  </li><li>磁盘分区的VolumeID  </li><li>文件夹Program Files的创建日期 </li></ol><p>因此，要更改TeamViewer ID，需要更改这3个值。</p><h2 id="Windows平台更改TeamViewer-ID"><a href="#Windows平台更改TeamViewer-ID" class="headerlink" title="Windows平台更改TeamViewer ID"></a>Windows平台更改TeamViewer ID</h2><ol><li><p>终止TeamViewer进程，从注册表中删除当前的TeamViewer ID  </p><ul><li>32位系统，找到 HKLM\SOFTWARE\TeamViewer\Version[X]，删除ClientID  </li><li>64位系统，找到 HKLM\SOFTWARE\Wow6432Node\TeamViewer\Version[X]，删除ClientID  </li><li>检查注册表项HKEY_CURRENT_USER\Software\TeamViewer是否存在并将其删除</li></ul></li></ol><ol start="2"><li><p>更改文件夹Program Files创建日期，可以使用<a href="http://www.nirsoft.net/utils/nircmd.html" target="_blank" rel="noopener">NirCMD</a>工具，执行以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nircmdc.exe setfilefoldertime "C:\Program Files" now now</span><br></pre></td></tr></table></figure> <img src="/2018/08/21/更改TeamViewerID方法总结/nircmdcexe.jpg" title="[nircmd]"></li><li><p>更改网卡MAC地址，可以通过各种MAC修改小工具更改MAC地址，例如Win7 MAC Address changer或手动通过注册表、网络适配器设置等更改，不具体叙述  </p></li><li><p>更改VolumeID，通过命令行工具<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/volumeid" target="_blank" rel="noopener">VolumeID v2.1</a>实现更改,方法如下  </p><ul><li>命令行执行 <code>vol</code>查看当前VolumeID <img src="/2018/08/21/更改TeamViewerID方法总结/cmd_vol.jpg" title="[vol]"> </li><li>执行<code>Volumeid.exe c: 5E37-EC11</code>更改VolumeID<img src="/2018/08/21/更改TeamViewerID方法总结/cmd_volume_id.jpg" title="[volume_id]"></li></ul></li><li>重新启动计算机，打开TeamViewer获得新的ID  </li></ol><h2 id="Linux平台更改TeamViewer-ID"><a href="#Linux平台更改TeamViewer-ID" class="headerlink" title="Linux平台更改TeamViewer ID"></a>Linux平台更改TeamViewer ID</h2><ol><li>使用su权限卸载Teamviewer  </li><li>删除文件/var/lib/dbus/machine-id（如果存在）</li><li>编辑GUID（你可以只替换最后一个字符）：mc -e id.txt  </li><li><p>更改网卡的MAC地址,命令如下  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 down</span><br><span class="line"></span><br><span class="line">ifconfig eth0 hw ether New_MAC_HERE</span><br><span class="line"></span><br><span class="line">ifconfig eth0 up</span><br><span class="line"></span><br><span class="line">nano /etc/network/interfaces</span><br><span class="line"></span><br><span class="line">pre-up ifconfig eth0 hw ether New_MAC_HERE</span><br></pre></td></tr></table></figure></li><li><p>重启计算机，安装Teamviewer获得新的ID  </p></li></ol><h2 id="Mac-OS平台更改TeamViewer-ID"><a href="#Mac-OS平台更改TeamViewer-ID" class="headerlink" title="Mac OS平台更改TeamViewer ID"></a>Mac OS平台更改TeamViewer ID</h2><p>直接执行Python脚本,重启即可，<a href="https://gist.github.com/zhovner/b1d72f3465c46e7b58a4ea42d625c3e8" target="_blank" rel="noopener">TeamViewer-id-changer.py</a>  </p>]]></content>
      
      
        <tags>
            
            <tag> TeamViewer </tag>
            
            <tag> 远程协助 </tag>
            
            <tag> 远程工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>台式机散热系统详解</title>
      <link href="/2018/07/23/%E5%8F%B0%E5%BC%8F%E6%9C%BA%E6%95%A3%E7%83%AD%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3/"/>
      <content type="html"><![CDATA[<p>一直对于台式机的散热没有一个清晰的认识，只知道风冷和水冷，今天无意在知乎上读到一篇关于台式机散热系统的文章<a href="https://zhuanlan.zhihu.com/p/38785504" target="_blank" rel="noopener">《电脑也讲风水？详解台式机散热系统》</a>,文章系统讲解了目前台式机的几种不同散热系统，并进行了简单的比较，对于不了解散热系统的小白非常有帮助，所以拿来收藏一下。  </p><a id="more"></a><ul><li>思维导图概述  </li></ul><img src="/2018/07/23/台式机散热系统详解/台式机散热系统.png" title="[台式机散热系统]">  <ul><li>原文内容  </li></ul><p>散热器原理简介：  </p><p>散热器的最终目的就是把热量传递给空气，避免芯片过热。物理学上，温差越大的两个物体，他们之间的热交换速率就越快，我们的散热器就是利用这个原理工作的，简单来讲就是散热器本身会吸收芯片的热量，散热器越热，他与空气的温度差越大，他就越容易把热量传给空气，当散热器传递给空气的热量和散热器从芯片那吸收来热量平衡，这时候散热器就不会再涨温度了，此时温度平衡，芯片的热量全部通过散热器排到空气中了。  </p><p>因此这里有两个问题，一个是导热，一个是散热，我们首先需要把热量从芯片导出来，然后再把这些热量散发出去。目前来讲，铜适合导热，铝适合散热。  </p><p>但是单靠铜导热还不行，聪明的人类发明了一个导热效率极高的物品：热管。  </p><p>我们知道液体变成气体需要吸热，气体变成液体需要放热，热管就是利用这个原理工作的。热管就是一根空心铜管，但是他的里面是填充了相变冷却液的，这种液体低温状态下是液体，在热的地方会吸收热量变成气体，然后走到冷的地方又会放出热量从气体变回液体，然后再流回热的地方，然后吸收热量后接着变成气体，如此循环往复。利用一个气体液体的转换（相变原理）将热量通过这种方式传递，热管是目前人类已知热传递效率最高的物体。  </p><p><img src="https://pic3.zhimg.com/80/v2-0db9d26334a62edf86daee34e1a437f8_hd.jpg"></p><p>【风冷部分】<br>一、铝块/铝片风冷，这个原理想必不用我说各位都知道了，就是直接把大铝块压在芯片表面，然后芯片直接把热量传给铝块，然后风扇带动铝块鳍片周围的空气流动，这个散热效果是目前最差的。</p><p><img src="https://pic4.zhimg.com/80/v2-1d6b486654372e6927922ab9409c22c9_hd.jpg"></p><p>二、铝块+铜柱风冷，这个散热相对于纯铝块，增加了一个导热铜柱，把散热器压在芯片上后，芯片会先将热量传递给铜柱，然后铜柱把热量传递给铝块，这种风冷足以控制绝大多数的i5和i3了，但是仍不推荐使用，散热效果依旧不可观。很多品牌整机和就是采用的这个散热。</p><p><img src="https://pic4.zhimg.com/80/v2-86071e3b97a0a9302e0a169547e926a3_hd.jpg"></p><p>三、热管+铝片风冷，这种散热器利用热管将芯片的热量吸收，然后通过热管导出后传递给铝制散热鳍片，然后再借助风扇吹铝片散热。这是目前最主流的风冷散热器，也是目前性价比最高的散热器，一个4热管12cm的散热器只需99块钱，足以压制目前所有的8核以下的不超频CPU。<br><img src="https://pic2.zhimg.com/80/v2-5b545ed4e8d5f71277d5aea0490d7935_hd.jpg"><br><em>4热管塔式散热器</em></p><p>热管+铝片的散热组合除了塔式外还有另一种形态就是下压式<br><img src="/images/placeholder.png" data-src="https://pic3.zhimg.com/80/v2-7eccdc81effe01dc55b043f46bc80d9c_hd.jpg" class="lazyload"></p><p>下压式和塔式的区别主要在风道上，下压式把热量堆积在CPU附近，而塔式可以直接吹离CPU，但是塔式毕竟体积大，很多小机箱还是采用下压式的。<br><img src="/images/placeholder.png" data-src="https://pic4.zhimg.com/80/v2-6e56e3e9defef1827bb53a2664167b72_hd.jpg" class="lazyload"></p><p><em>左侧是塔式散热器，右侧是下压式散热器</em></p><p>【水冷部分】<br>水冷主要就两种：一体式水冷与分体式水冷。</p><p>一、一体式水冷：</p><p><img src="/images/placeholder.png" data-src="https://pic1.zhimg.com/80/v2-906c58320fc829a8f469f9cb2a47e135_hd.jpg" class="lazyload">  </p><p><em>图片为恩杰海妖X62一体式水冷</em></p><p>一体式水冷是目前用的比较多水冷，从名字上看就知道这种水冷属于一体式不可拆分的。他的结构如下图，主要是水冷排+水管+泵头。  </p><p><img src="/images/placeholder.png" data-src="https://pic1.zhimg.com/80/v2-383aecf889773fa3435ea285de825cfd_hd.jpg" class="lazyload"></p><p>工作原理想必不用我说各位也知道了，泵头直接接触CPU表面，冷水在内部经过泵的运转流过泵头变成热水，热水流到冷排处，把热量传递给含有大量铝制鳍片的冷排，然后变成冷水流回泵头。一体式水冷只是把泵和吸热头做到一块了。  </p><p><img src="/images/placeholder.png" data-src="https://pic3.zhimg.com/80/v2-6d25213ffaf32b84e7b56648c8fad18a_hd.jpg" class="lazyload"></p><p>判断一体式水冷的散热能力主要就看冷排大小，一般以以风扇直径为基础，最小的120mm冷排，然后是中号的240mm冷排和最大号的360mm冷排。这里我就这么说，所有的120冷排都是废物，为什么，一个120冷排起码也要个200块钱，而200块钱你可以买到6热管的风冷，散热能力直追360的一体式水冷，很多淘宝商家宣传什么我的电脑是水冷，你以为很NB，实际上120的冷排真不如99块钱的4热管散热器来的舒服。<br><img src="/images/placeholder.png" data-src="https://pic1.zhimg.com/80/v2-9be55a063458509e3df16271d7fa93e6_hd.jpg" class="lazyload"></p><p>二、分体式水冷：</p><p>分体式水冷是目前散热能力最强的也是最贵的，这里找了个某宝的图给大家看看。<br><img src="/images/placeholder.png" data-src="https://pic3.zhimg.com/80/v2-daafd0371d1b8a39c066b20e66945e3c_hd.jpg" class="lazyload"></p><p>分体水冷主要就是两种，一个是硬管一个是软管，主要区别就是水管的材质不一样。</p><p>分体水冷相对于一体式水冷最大的优势是有着自己的独立水泵，独立冷头，独立水路和水管，独立的冷排，还有独立水箱，这是目前效果最明显也是最贵的散热系统。一套软管起码也要1500起步，一套硬管都要到3000了。</p><p>分体水冷看着炫酷，散热效果好，但是缺点可不是就只有一个贵字，分体水冷的接口众多，随着时间的推移，接口处老化，慢慢的漏水风险就会越来越高，一旦漏水，瞬间BOOM，除此之外，整个水路需要定期维护不仅耗费财力还耗费精力，一体式水冷就要安全的多，接口数量少，而且厂家为了避免漏水密封措施做得非常好，而且还有漏水后的赔偿和保修，所以目前，分体水冷不是我们平民玩家能玩的，这些是为那些随手就是几万配电脑的土豪玩的。</p><p>【全文总结】<br>散热能力排行：分体软管&gt;分体硬管&gt;360一体式&gt;8热管风冷&gt;6热管风冷=240水冷&gt;4热管风冷&gt;120水冷&gt;2热管风冷&gt;铜柱铝块&gt;铝块</p><p>价格排行：分体水冷&gt;一体水冷&gt;热管风冷&gt;铜柱铝块&gt;铝块</p><p>性价比排行：热管风冷&gt;一体水冷&gt;软管水冷&gt;硬管水冷（铝块2个不推荐）</p><p>早期电脑都采用铝块散热，后来换到了铜柱+铝块，目前很多品牌整机还在用这个，主流家用风冷都是4热管塔式散热器，120水冷是废物，还不如4热管塔式散热，240水冷看什么型号，部分型号和4热管五五开，实际也拉不开多大差距，主要是不用和风冷一样一坨堆在那里，360冷排很贵，还需要机箱有足够的空间。分体式水冷软管还能玩玩，硬管漏水风险高，搭建成本和维护成本都高，不适合普通用户。</p>]]></content>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
            <tag> 台式机散热 </tag>
            
            <tag> CPU散热 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VerySync数据传输工具简单体验</title>
      <link href="/2018/07/18/VerySync%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7%E7%AE%80%E5%8D%95%E4%BD%93%E9%AA%8C/"/>
      <content type="html"><![CDATA[<blockquote><p>简单易用的多平台文件同步软件，惊人的传输速度是不同于其他产品的最大优势， 微力同步 的智能 P2P 技术加速同步，会将文件分割成若干份仅 KB 的数据同步，而文件都会进行 AES 加密处理。  </p></blockquote><a id="more"></a><p>以上是verysync(微力同步)官方网站首页对于这款文件夹同步软件的简单概况，自己简单体验了一下，进行简单的记录。  </p><p>verysync支持多种桌面系统平台，同时支持安卓设备以及流行的NAS系统，本次体验平台为：macOS Sierra、Manjaro Linux。  </p><ul><li>verysync使用webui管理同步任务，进行相关设置，在桌面级系统上使用非常方便，基本无需复杂配置。  </li></ul><img src="/2018/07/18/VerySync数据传输工具简单体验/WX20180718-162152.png" title="[WEBUI]">  <ul><li>同步任务的建立只需要新建<em>标准文件夹</em>即可，新建后可根据<em>只读</em>或<em>读写</em>的不同需求使用不同的密钥。  </li></ul><img src="/2018/07/18/VerySync数据传输工具简单体验/WX20180718-162730.png" title="[WEBUI]">  <ul><li>需要远程同步的文件夹只需要根据提供密钥导入，选择本地文件夹即可。  </li></ul><img src="/2018/07/18/VerySync数据传输工具简单体验/WX20180718-163112.png" title="[WEBUI]"><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>最常见的应用场景就是文件分享啦，脱离云盘，自由自在。 </li><li>对于站长、系统维护人员这也是一款不错的异地备份工具，相较于其他一些配置复杂的同步工具来说，上手简单，脱离阿里云快照，妈妈再也不用担心我的网站没备份了。</li></ol><p>微力同步<a href="http://verysync.com/" target="_blank" rel="noopener">官网传送门</a></p>]]></content>
      
      
        <tags>
            
            <tag> 数据传输工具 </tag>
            
            <tag> 文件夹同步 </tag>
            
            <tag> verysync </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Liunx图形界面相关知识</title>
      <link href="/2018/07/07/Liunx%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <content type="html"><![CDATA[<p>一直对于Linux桌面发行版使用的各种桌面环境，窗口管理器等相关概念不太了解，趁着最近折腾Manjaro,把相关的知识学习梳理一下<br><a id="more"></a></p><h2 id="Linux图形界面"><a href="#Linux图形界面" class="headerlink" title="Linux图形界面"></a>Linux图形界面</h2><p><strong>linux图形界面的实现只是linux下的应用程序实现</strong>，图形界面（GUI）并不是linux的一部分</p><h2 id="Linux图形界面的实现"><a href="#Linux图形界面的实现" class="headerlink" title="Linux图形界面的实现"></a>Linux图形界面的实现</h2><ul><li><p>Linux图形界面是由实现了X协议的具体软件来实现的，具体软件有：XFree86、XORG、Xnest、MOTIF(商业上常用)。  </p><ul><li>关于X协议：</li></ul><ol><li><p>作为协议是与平台无关的，不是具体实现的软件  </p></li><li><p>X协议主要有<em>X客户端</em>和<em>X服务器</em>组成</p><blockquote><p>如：我需要划个圆，X应用程序告诉X服务器在屏幕的什么地方用什么颜色画一个多大的圆，而具体的”画”的动作，比如这个圆如何生成，用什么显卡的驱动程序去指挥显卡完成等等工作是由X服务器来完成的   </p></blockquote></li><li><p>X协议的服务器和客户端程序通常在同一台电脑上  </p></li><li><p>X、X11、X11R6的关系 </p><blockquote><p>不知道初学者有没有注意到/usr/X11R6这个目录，这是XFree的默认安装目录<br>X11R6实际上是XProtocol version 11 Release6(X协议第11版第六次发行)的意思，就是说目前用的X协议是第11版的，然后经过了6次小的修正。不同版本的X协议是不能通信的，就象我们现在IPV4和IPV6不能通信一样，不过不用担心，现在的X服务器软件和X应用程序都遵循X11R6.<br>另外XFree86 3.3.6、XFree86 4.3.6等这些版本是实现X协议的软件XFree86的版本号.这是初学者经常高混淆的概念.</p></blockquote></li><li><p>X协议客户端实现</p><blockquote><p>XFree86是X协议的服务器软件(注以软件的形式实现)，但Client端更多的是方便程序员更方便的使用X协议与服务器端的XFree86交互，故就产生了一个Xlib库，封装了X协议内容，如果你还觉得直接使用Xlib不方便，于是就产生了QT和GTK，对Xlib进一步封装，提供了很多控件，可以可视化的使用X协议更方便程序员的开发。</p><img src="/2018/07/07/Liunx图形界面相关知识/xapp.jpg" title="[Xlib、QT、GTK直接关系]"> </blockquote></li></ol></li></ul><h2 id="Linux桌面环境"><a href="#Linux桌面环境" class="headerlink" title="Linux桌面环境"></a>Linux桌面环境</h2><ul><li><p><a href="https://wiki.archlinux.org/index.php/Desktop_environment" target="_blank" rel="noopener">桌面环境(DE)</a></p><blockquote><p>泛指桌面的背景图片，桌面的应用程序软件，桌面的快捷方式，桌面的DIY小部件等组成的一个直观的视觉环境。<strong>桌面环境可能仅仅是一个简单的窗口管理器。</strong> 四大主流DE(并不只是窗口管理器，同时提供了桌面、菜单等等):KDE、Gnome、Xfce、LXDE</p><img src="/2018/07/07/Liunx图形界面相关知识/kde.jpg" title="[kde与qt]"> <img src="/2018/07/07/Liunx图形界面相关知识/gnome.jpg" title="[gnome与gtk]"> </blockquote></li><li><p><a href="https://wiki.archlinux.org/index.php/Window_manager" target="_blank" rel="noopener">窗口管理器(WM)</a></p><blockquote><p>窗口管理器的作用就是实现窗口的最大化、最小化、移动、关闭等，而这些不是X服务器来负责完成的。如果不窗口管理器，X应用程序仍可以启动，但它就在屏幕中间，不能移动、不能最小化、不能最大化、没有边框。</p></blockquote></li><li><p><a href="https://wiki.archlinux.org/index.php/Display_manager" target="_blank" rel="noopener">显示管理器(DM)</a></p><blockquote><p>显示管理器或登录管理器是一个在启动最后显示的图形界面。和窗口管理器一样，显示管理器有很多种。通常每个显示管理器都能进行一些定制。</p></blockquote></li></ul><img src="/2018/07/07/Liunx图形界面相关知识/xclient.jpg" title="[实现图解]"> <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>Linux的图形界面只是应用程序，不同于现代的Windows，内建于内核中。  </p></li><li><p>Linux通过X服务器和X客户端实现图形界面，而X客户端通常是DE、WM、DM等组成实现。 </p></li><li><p>DE可以包含WM、DM等，有的WM可以单独作为DE使用,比如i3wm?  </p></li><li><p>QT、GTK等是实现DE(KDE、Gnome)、WM等的类库。</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Gnome </tag>
            
            <tag> KDE </tag>
            
            <tag> GTK </tag>
            
            <tag> QT </tag>
            
            <tag> X Window </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pacman与yaourt常用命令记录</title>
      <link href="/2018/07/01/pacman%E4%B8%8Eyaourt%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<blockquote><p>Manjaro是一款基于Arch Linux、对用户友好的Linux发行版。在Linux社区，Arch Linux的确是一个异常快速、强大、轻量级的发行版，它提供最新的、最全的软件。  </p></blockquote><p>Manjaro官方提供了XFCE、KDE、GNOME三种DE版本，同时还有<a href="https://manjaro.org/category/community-editions/deepin/" target="_blank" rel="noopener">Deepin的桌面移植版本</a>,本着人丑还颜控的精神体验了一下KDE版本，记录下pacman和yaourt两个包管理器的简单常用的命令。   </p><a id="more"></a><p>进入系统的第一件事是要更新系统，通常会出现一些小问题，解决方法参见<a href="https://wiki.manjaro.org/index.php?title=Pacman_troubleshooting" target="_blank" rel="noopener">官方WIKI</a>  </p><h3 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统更新 </span></span><br><span class="line">pacman -Syu <span class="comment">#对整个系统进行更新</span></span><br><span class="line">pacman -Sy <span class="comment">#将本地的包数据库与远程的仓库进行了同步</span></span><br><span class="line">pacman -Su <span class="comment">#不同步数据库直接进行更新</span></span><br><span class="line"><span class="comment">#安装包 </span></span><br><span class="line">pacman -S 包名 <span class="comment">#例如，执行 pacman -S firefox 将安装 Firefox。你也可以同时安装多个包，只需以空格分隔包名即可。</span></span><br><span class="line">pacman -Sy 包名 <span class="comment">#与上面命令不同的是，该命令将在同步包数据库后再执行安装。</span></span><br><span class="line">pacman -Sv 包名 <span class="comment">#在显示一些操作信息后执行安装。 </span></span><br><span class="line">pacman -U <span class="comment">#安装本地包，其扩展名为 pkg.tar.gz。</span></span><br><span class="line"><span class="comment">#删除包</span></span><br><span class="line">pacman -R 包名 <span class="comment">#该命令将只删除包，不包含该包的依赖。</span></span><br><span class="line">pacman -Rs 包名 <span class="comment">#在删除包的同时，也将删除其依赖。</span></span><br><span class="line">pacman -Rd 包名 <span class="comment">#在删除包时不检查依赖。</span></span><br><span class="line"><span class="comment">#搜索包</span></span><br><span class="line">pacman -Ss 关键字 <span class="comment">#这将搜索含关键字的包。</span></span><br><span class="line">pacman -Qi 包名 <span class="comment">#查看有关包的信息。</span></span><br><span class="line">pacman -Ql 包名 <span class="comment">#列出该包的文件。</span></span><br><span class="line"><span class="comment">#其他用法</span></span><br><span class="line">pacman -Sw 包名 <span class="comment">#只下载包，不安装。</span></span><br><span class="line">pacman -Sc Pacman <span class="comment">#下载的包文件位于 /var/cache/pacman/pkg/ 目录。该命令将清理未安装的包文件。</span></span><br><span class="line">pacman -Scc <span class="comment">#清理所有的缓存文件。</span></span><br></pre></td></tr></table></figure><h3 id="yaourt"><a href="#yaourt" class="headerlink" title="yaourt"></a>yaourt</h3><p>yaourt官方并未集成，需要使用pacman安装，<code>pacman -S yaourt</code>，用法与pacman类似。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S 包名 <span class="comment">#从AUR安装包</span></span><br><span class="line">yaourt -Ss 关键字 <span class="comment">#使用关键字搜索包</span></span><br><span class="line">yaourt -Syu -aur <span class="comment">#从AUR升级本地源数据库并安装更新</span></span><br><span class="line">yaourt -Si 包名 <span class="comment">#列出包信息</span></span><br><span class="line">yaourt -Sc <span class="comment">#从缓存中清楚旧的包</span></span><br><span class="line">yaourt -Su <span class="comment">#安装AUR中的更新包</span></span><br><span class="line">yaourt -Sy <span class="comment">#获取最新的AUR包数据库</span></span><br><span class="line">yaourt -Cd <span class="comment">#清楚AUR包数据库</span></span><br><span class="line">yaourt -R 包名 <span class="comment">#删除软件包</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Arch </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP基础知识思维导图</title>
      <link href="/2018/06/29/PHP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <content type="html"><![CDATA[<p>最近在玩VSCODE，高颜值，插件丰富，微软出品，轻量。通过插件打造成了还不错的PHP集成开发环境,当然还是和PHPSTORM存在不少的差距，毕竟后者更加专注PHP开发，还经受了广大“世界上最好的编程语言”使用者的多年考验，口碑非常不错，不过我相信随着VSCODE社区开发者们对插件的不断更新迭代，VSCODE对各大编程语言的支持会越来越趋近于完善，这对我这种“全栈”真是再好不过了(手动捂脸)。  </p><p>安装好PHP Extension Pack插件，敲敲小Demo，顺便复习一下PHP基础知识，温故知新，转载一份思维导图如下，转自<a href="https://segmentfault.com/a/1190000010743582#articleHeader6" target="_blank" rel="noopener">十五张思维导图带你快速学习PHP语言基础</a>  </p><a id="more"></a><ul><li><a href="#info">PHP简介</a></li><li><a href="#setup">PHP安装</a></li><li><a href="#grammar">PHP语法</a></li><li><a href="#type">PHP数据类型</a></li><li><a href="#var">PHP变量</a></li><li><a href="#array">PHP数组</a></li><li><a href="#const">PHP常量</a></li><li><a href="#globals">PHP超级全局变量</a></li><li><a href="#magic">PHP魔术变量</a></li><li><a href="#operator">PHP运算符</a></li><li><a href="#func">PHP函数</a></li><li><a href="#namespace">PHP命名空间</a></li><li><a href="#object">PHP面向对象</a></li><li><a href="#exception">PHP错误与异常</a>  </li></ul><h2 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a><span id="info">PHP简介</span></h2><img src="/2018/06/29/PHP基础知识思维导图/PHP简介.png" title="[PHP简介]">  <h2 id="PHP安装"><a href="#PHP安装" class="headerlink" title="PHP安装"></a><span id="setup">PHP安装</span></h2><img src="/2018/06/29/PHP基础知识思维导图/PHP安装.png" title="[PHP安装]">  <h2 id="PHP语法"><a href="#PHP语法" class="headerlink" title="PHP语法"></a><span id="grammar">PHP语法</span></h2><img src="/2018/06/29/PHP基础知识思维导图/PHP语法.png" title="[PHP语法]">  <h2 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a><span id="type">PHP数据类型</span></h2><img src="/2018/06/29/PHP基础知识思维导图/PHP数据类型.png" title="[PHP数据类型]">  <h2 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a><span id="var">PHP变量</span></h2><img src="/2018/06/29/PHP基础知识思维导图/PHP变量.png" title="[PHP变量]">  <h2 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a><span id="array">PHP数组</span></h2><img src="/images/placeholder.png" title="[PHP数组]" data-src="/2018/06/29/PHP基础知识思维导图/PHP数组.png" class="lazyload">  <h2 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a><span id="const">PHP常量</span></h2><img src="/images/placeholder.png" title="[PHP常量]" data-src="/2018/06/29/PHP基础知识思维导图/PHP常量.png" class="lazyload">  <h2 id="PHP超级全局变量"><a href="#PHP超级全局变量" class="headerlink" title="PHP超级全局变量"></a><span id="globals">PHP超级全局变量</span></h2><img src="/images/placeholder.png" title="[PHP超级全局变量]" data-src="/2018/06/29/PHP基础知识思维导图/PHP超级全局变量.png" class="lazyload">  <h2 id="PHP魔术变量"><a href="#PHP魔术变量" class="headerlink" title="PHP魔术变量"></a><span id="magic">PHP魔术变量</span></h2><img src="/images/placeholder.png" title="[PHP魔术变量]" data-src="/2018/06/29/PHP基础知识思维导图/PHP魔术变量.png" class="lazyload">  <h2 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a><span id="operator">PHP运算符</span></h2><img src="/images/placeholder.png" title="[PHP运算符]" data-src="/2018/06/29/PHP基础知识思维导图/PHP运算符.png" class="lazyload">  <h2 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a><span id="func">PHP函数</span></h2><img src="/images/placeholder.png" title="[PHP函数]" data-src="/2018/06/29/PHP基础知识思维导图/PHP函数.png" class="lazyload">  <h2 id="PHP命名空间"><a href="#PHP命名空间" class="headerlink" title="PHP命名空间"></a><span id="namespace">PHP命名空间</span></h2><img src="/images/placeholder.png" title="[PHP命名空间]" data-src="/2018/06/29/PHP基础知识思维导图/PHP命名空间.png" class="lazyload">  <h2 id="PHP面向对象"><a href="#PHP面向对象" class="headerlink" title="PHP面向对象"></a><span id="object">PHP面向对象</span></h2><img src="/images/placeholder.png" title="[PHP面向对象]" data-src="/2018/06/29/PHP基础知识思维导图/PHP面向对象.png" class="lazyload">  <h2 id="PHP错误与异常"><a href="#PHP错误与异常" class="headerlink" title="PHP错误与异常"></a><span id="exception">PHP错误与异常</span></h2><img src="/images/placeholder.png" title="[PHP错误与异常]" data-src="/2018/06/29/PHP基础知识思维导图/PHP错误与异常.png" class="lazyload">  <p><a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank"><img src="/images/placeholder.png" title="[4.0]" data-src="/2018/06/29/PHP基础知识思维导图/by-nc-nd.svg" class="lazyload"></a></p>]]></content>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/26/World/"/>
      <content type="html"><![CDATA[<blockquote><p>Hello World!  </p></blockquote><a id="more"></a><p>在GitHub Page上安了个窝，随便记录下生活，工作，学习。  </p><p>距离上一个小窝搭建到不了了之差不多已经过了十一二年，从最早的新浪博客、百度空间，再到独立的WordPress、ZBlog期间经历了不少，也学习了很多，也正是这些经历让我从一个地地道道的文科生变成了今天的半吊子代码搬运工。</p><p>不定期记录一些学习笔记、生活琐事、有趣无趣的心得体会。</p><p>这是本博的第一篇，当然最后还是惯例，大声喊出代码搬运工的口号：Hello World!</p>]]></content>
      
      
    </entry>
    
  
  
</search>
